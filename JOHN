#include <iostream>
#include <cctype>
#include "utility.h"
#include "ohhi.h"

/**
 * --------------------------------------------------------
 * ---------- UTILITY FUNCTIONS ---------------------------
 * --------------------------------------------------------
 */

int count_unknown_squares(const int board[MAX_SIZE][MAX_SIZE], int size) {
    // write your code here

    // replace this return statement
    return 0;
}


/**
 * --------------------------------------------------------
 * --------- VALIDITY CHECKING FUNCTIONS ------------------
 * --------------------------------------------------------
 */

bool row_has_no_threes_of_color(const int board[MAX_SIZE][MAX_SIZE],
                                int size,
                                int row,
                                int color) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    if (row < 0 || row > size) {
        return false;
    }
    if (color != RED && color != BLUE) {
        return false;
    }
    for (int col = 0; col < size - 2; col++) {
        if (board[row][col] == board[row][col + 1] == board[row][col + 2] == color) {
            return false;
        }
    }
    return true;
}

bool col_has_no_threes_of_color(const int board[MAX_SIZE][MAX_SIZE],
                                int size,
                                int col,
                                int color) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    if (col < 0 || col > size) {
        return false;
    }
    if (color != RED && color != BLUE) {
        return false;
    }
    for (int row = 0; row < size - 2; row++) {
        if (board[row][col] == board[row + 1][col] == board[row + 2][col] == color) {
            return false;
        }
    }
    return true;
}

bool board_has_no_threes(const int board[MAX_SIZE][MAX_SIZE], int size) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    for (int i = 0; i < size; i++) {
        if (!row_has_no_threes_of_color(board, size, i, RED)) {
            return false;
        }
        if (!row_has_no_threes_of_color(board, size, i, BLUE)) {
            return false;
        }
        if (!col_has_no_threes_of_color(board, size, i, RED)) {
            return false;
        }
        if (!col_has_no_threes_of_color(board, size, i, BLUE)) {
            return false;
        }
    }
    return true;
}

bool rows_are_different(const int board[MAX_SIZE][MAX_SIZE],
                        int size,
                        int row1,
                        int row2) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    if (row1 < 0 || row1 > size || row2 < 0 || row2 > size) {
        return false;
    }
    for (int i = 0; i < size; i++) {
        if (board[row1][i] != board[row2][i]) {
            return true;
        }
        if (board[row1][i] == UNKNOWN || board[row2][i] == UNKNOWN) {
            return true;
        }
    }
    return false;
}

bool cols_are_different(const int board[MAX_SIZE][MAX_SIZE],
                        int size,
                        int col1,
                        int col2) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    if (col1 < 0 || col1 > size || col2 < 0 || col2 > size) {
        return false;
    }
    for (int i = 0; i < size; i++) {
        if (board[i][col1] != board[i][col2]) {
            return true;
        }
        if (board[i][col1] == UNKNOWN || board[i][col2] == UNKNOWN) {
            return true;
        }
    }
    return false;
}

bool board_has_no_duplicates(const int board[MAX_SIZE][MAX_SIZE], int size) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    for (int i = 0; i < size - 1; i++) {
        if (!rows_are_different(board, size, i, i + 1)) {
            return false;
        }
        if (!cols_are_different(board, size, i, i + 1)) {
            return false;
        }
    }
    return true;
}


/**
 * --------------------------------------------------------
 * ---------- SOLVING FUNCTIONS ---------------------------
 * --------------------------------------------------------
 */

void solve_three_in_a_row(int board[MAX_SIZE][MAX_SIZE],
                          int size,
                          int row,
                          bool announce) {
    // write your code here

    return;
}

void solve_three_in_a_column(int board[MAX_SIZE][MAX_SIZE],
                             int size,
                             int col,
                             bool announce) {
    // write your code here

    return;
}


void solve_balance_row(int board[MAX_SIZE][MAX_SIZE],
                       int size,
                       int row,
                       bool announce) {
    // write your code here

    return;
}

void solve_balance_column(int board[MAX_SIZE][MAX_SIZE],
                          int size,
                          int col,
                          bool announce) {
    // write your code here

    return;
}


/**
 * --------------------------------------------------------
 * ---------- GAMEPLAY FUNCTIONS --------------------------
 * --------------------------------------------------------
 */

bool board_is_solved(const int board[MAX_SIZE][MAX_SIZE], int size) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (board[i][j] != RED && board[i][j] != BLUE) {
                return false;
            }
        }
    }
    if (!board_has_no_threes(board, size)) {
        return false;
    }
    if (!board_has_no_duplicates(board, size)) {
        return false;
    }
    return true;
}

bool check_valid_input(int size, int row_input, char col_input,
                       char color_char, int &row, int &col) {
    if (row_input < 1 || row_input > size) {
        cout << "Sorry, that's not a valid input." << endl;
        return false;
    }
    if (col_input < 'a') {
        cout << "Sorry, that's not a valid input." << endl;
        return false;
    } else if (col_input > ('a' + size - 1) && col_input < 'A') {
        cout << "Sorry, that's not a valid input." << endl;
        return false;
    } else if (col_input > 'A') {
        cout << "Sorry, that's not a valid input." << endl;
        return false;
    }
    if (color_char != RED_LETTER || color_char != BLUE_LETTER || color_char != UNKNOWN_LETTER) {
        cout << "Sorry, that's not a valid input." << endl;
        return false;
    }
    row = row_input - 1;
    col = col_input;
    return true;
}

bool check_valid_move(const int original_board[MAX_SIZE][MAX_SIZE],
                      const int current_board[MAX_SIZE][MAX_SIZE],
                      int size, int row, int col, int color) {
    if (size > MAX_SIZE || size < 0 || size % 2 != 0) {
        return false;
    }
    if (row < 0 || row > size || col < 0 || col > size) {
        return false;
    }
    if (original_board[row][col] != UNKNOWN) {
        cout << "Sorry, original squares cannot be changed." << endl;
        return false;
    }
    if (!board_has_no_threes(current_board, size)) {
        cout << "Sorry, that move violates a rule." << endl;
        return false;
    }
    if (!board_has_no_duplicates(current_board, size)) {
        cout << "Sorry, that move violates a rule." << endl;
        return false;
    }
    return true;
}
